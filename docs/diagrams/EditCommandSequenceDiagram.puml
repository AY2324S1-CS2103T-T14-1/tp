@startuml
!include Style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":EditCommandParser" as EditCommandParser LOGIC_COLOR
participant "e:EditCommand" as EditCommand LOGIC_COLOR
participant ":EditPersonDescriptor" as EditPersonDescriptor LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("edit 2 p/12345678")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("edit 2 p/12345678")
activate AddressBookParser

create EditCommandParser
AddressBookParser -> EditCommandParser
activate EditCommandParser

EditCommandParser --> AddressBookParser
deactivate EditCommandParser

AddressBookParser -> EditCommandParser : parse(" 2 p/12345678")
activate EditCommandParser

create EditCommand
EditCommandParser -> EditCommand
activate EditCommand

EditCommand --> EditCommandParser : e
deactivate EditCommand

EditCommandParser --> AddressBookParser : e
deactivate EditCommandParser
EditCommandParser -[hidden]-> AddressBookParser : e
destroy EditCommandParser

AddressBookParser --> LogicManager : e
deactivate AddressBookParser

LogicManager -> EditCommand : execute(model)
activate EditCommand

EditCommand -> Model : getPersonList()
activate Model

Model --> EditCommand : personToEdit
deactivate Model

EditCommand -> EditPersonDescriptor :
activate EditPersonDescriptor

EditPersonDescriptor -> EditPersonDescriptor : isAnyFieldEdited()
activate EditPersonDescriptor

EditPersonDescriptor --> EditPersonDescriptor :
deactivate EditPersonDescriptor

EditPersonDescriptor -> EditPersonDescriptor : setPhone()
activate EditPersonDescriptor

EditPersonDescriptor --> EditPersonDescriptor :
deactivate EditPersonDescriptor

EditPersonDescriptor --> EditCommand : editPersonDescriptor
deactivate EditPersonDescriptor

EditCommand -> EditCommand : createEditedPerson(personToEdit, editPersonDescriptor)
activate EditCommand

EditCommand --> EditCommand : editedPerson
deactivate EditCommand

EditCommand -> Model : setPerson(personToEdit, editedPerson)
activate Model

Model --> EditCommand
deactivate Model

create CommandResult
EditCommand -> CommandResult
activate CommandResult

CommandResult --> EditCommand : result
deactivate CommandResult

EditCommand --> LogicManager : result
deactivate EditCommand

LogicManager -->[
deactivate LogicManager

@enduml
